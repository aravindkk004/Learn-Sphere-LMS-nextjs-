import {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} from "@google/generative-ai";

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const courseOutline = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: "Generate a study material for Python for Exam and level of difficulty will be Easy with summary of course, List of Chapters along with summary for each chapter, Topic list in each chapter, All results in JSON format.",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "course_title": "Introduction to Python Programming (Easy Level)",\n  "course_summary": "This course provides a beginner-friendly introduction to the Python programming language. It focuses on the fundamental concepts necessary to start writing basic Python programs. Topics include variables, data types, basic operators, conditional statements, loops, lists, and functions. The emphasis is on building a solid foundation for further learning in programming.",\n  "difficulty_level": "Easy",\n    "chapters": [\n    {\n      "chapter_number": 1,\n      "chapter_title": "Getting Started with Python",\n      "chapter_summary": "This chapter introduces the Python programming language and its basic setup. You will learn how to install Python, write and execute your first Python program, and understand the basic structure of a Python script.",\n      "topics": [\n        "What is Python?",\n        "Why use Python?",\n        "Installing Python (Windows, macOS, Linux)",\n        "Setting up a Python environment",\n        "Writing and executing your first Python program (\'Hello, World!\')",\n        "Basic syntax and structure of a Python program"\n      ]\n    },\n    {\n      "chapter_number": 2,\n      "chapter_title": "Variables and Data Types",\n      "chapter_summary": "This chapter introduces fundamental data types and how to store data using variables in Python. You will learn about different data types such as integers, floats, strings, and booleans, and how to perform basic operations on them.",\n      "topics": [\n        "Variables: Naming and assigning values",\n        "Data Types: Integers (int)",\n        "Data Types: Floating-point numbers (float)",\n        "Data Types: Strings (str)",\n        "Data Types: Booleans (bool)",\n        "Type checking using type() function",\n          "Type Conversion"\n      ]\n    },\n    {\n      "chapter_number": 3,\n      "chapter_title": "Basic Operators",\n      "chapter_summary": "This chapter covers the various operators in Python that allow you to perform arithmetic, comparison, and logical operations on data. You\'ll learn how to use these operators to create simple expressions and calculations.",\n      "topics": [\n        "Arithmetic Operators (+, -, *, /, %, **)",\n        "Comparison Operators (==, !=, >, <, >=, <=)",\n        "Logical Operators (and, or, not)",\n        "Operator precedence",\n        "Using operators with different data types"\n      ]\n    },\n    {\n      "chapter_number": 4,\n      "chapter_title": "Conditional Statements",\n      "chapter_summary": "This chapter introduces conditional statements (`if`, `elif`, `else`), which are essential for making decisions in your programs. You\'ll learn how to control the flow of execution based on certain conditions.",\n      "topics": [\n        "The if statement",\n        "The if-else statement",\n        "The if-elif-else statement",\n        "Nested conditional statements",\n        "Using conditions with different data types and operators"\n      ]\n    },\n    {\n      "chapter_number": 5,\n      "chapter_title": "Loops",\n      "chapter_summary": "This chapter covers looping constructs (`for` and `while` loops), which allow you to repeat blocks of code. You will learn how to use loops to iterate over sequences and repeat tasks until certain conditions are met.",\n      "topics": [\n        "The for loop: Iterating over a sequence",\n        "The while loop: Repeating until a condition is false",\n          "The break statement",\n          "The continue statement",\n        "Loop control variables",\n          "Nested loops"\n      ]\n    },\n     {\n      "chapter_number": 6,\n       "chapter_title": "Lists",\n      "chapter_summary": "This chapter introduces lists, which are fundamental data structures for storing collections of items. You\'ll learn how to create, access, modify, and manipulate lists.",\n      "topics": [\n          "Creating lists",\n          "Accessing list elements using index",\n          "List slicing",\n          "Adding elements to list",\n           "Removing elements from list",\n          "List methods (append, insert, remove, pop)",\n          "Iterating through a list using for loop",\n          "List comprehensions (basic)"\n\n      ]\n    },\n      {\n        "chapter_number": 7,\n        "chapter_title": "Introduction to Functions",\n        "chapter_summary": "This chapter introduces the concept of functions, which help organize and reuse code. You will learn how to define your own functions, pass arguments, and return values.",\n        "topics": [\n          "What are functions and why use them?",\n          "Defining functions using the \'def\' keyword",\n          "Function arguments (parameters)",\n          "Returning values from functions using \'return\'",\n          "Calling functions",\n            "Scope of variables"\n        ]\n      }\n  ]\n}\n```\n',
        },
      ],
    },
  ],
});

export const generateNotesAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate exam material detail content for each chapter, Make sure to includes all topic point in the content, make sure to give content in HTML format (Do not add HTMLKL, Head, body, title tag) add more css to make it more attractive,  and colorful, use latin, inter, poppins font family, make it responsive style also. The chapters:       {\n\"chapter_number\": 1,\n\"chapter_title\": \"Introduction to Python\",\n\"chapter_summary\": \"This chapter introduces the fundamentals of Python, including what it is, why it's popular, setting up the environment, and writing your first simple program.\",\n\"topics\": [\n\"What is Python?\",\n\"Why use Python?\",\n\"Setting up Python (Installation & Environment)\",\n\"Running your first Python program ('Hello, World!')\",\n\"Basic Syntax rules\",\n\"Comments in Python\"\n]\n},"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```html\n<style>\n  body {\n    font-family: 'Inter', sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f8f9fa;\n    color: #343a40;\n  }\n  .chapter-container {\n    width: 90%;\n    max-width: 900px;\n    margin: 20px auto;\n    background-color: #fff;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    padding: 20px;\n    transition: all 0.3s ease;\n  }\n\n    .chapter-container:hover {\n        box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n        transform: translateY(-2px);\n    }\n\n\n    .chapter-title {\n        font-family: 'Poppins', sans-serif;\n        color: #007bff;\n        text-align: center;\n        margin-bottom: 20px;\n        border-bottom: 2px solid #007bff;\n        padding-bottom: 10px;\n        font-size: 2em;\n      }\n\n  .topic-title {\n    font-family: 'Poppins', sans-serif;\n    color: #28a745;\n    margin-top: 20px;\n    margin-bottom: 10px;\n    border-left: 4px solid #28a745;\n    padding-left: 10px;\n    font-size: 1.3em;\n  }\n\n  .content {\n      line-height: 1.6;\n      font-size: 1em;\n      color: #495057;\n      margin-bottom: 15px;\n      padding: 10px;\n      background-color: #f0f8ff;\n      border-left: 3px solid #add8e6;\n      border-radius: 5px;\n  }\n  .content p{\n      margin-bottom: 10px;\n  }\n    .content ul {\n        padding-left: 20px;\n        margin-bottom: 10px;\n    }\n\n    .content li{\n        margin-bottom: 8px;\n    }\n    .code-block{\n        background-color: #e9ecef;\n        padding: 10px;\n        border-radius: 5px;\n        font-family: monospace;\n        overflow-x: auto;\n        color: #212529;\n        margin: 10px 0;\n        border: 1px solid #ced4da;\n    }\n    .exam-note{\n      background-color: #fff3cd;\n        padding: 10px;\n        border-radius: 5px;\n        color: #856404;\n        margin: 10px 0;\n        border: 1px solid #ffeeba;\n        font-style: italic;\n    }\n  @media (max-width: 768px) {\n      .chapter-container {\n          width: 95%;\n          padding: 15px;\n      }\n      .chapter-title {\n            font-size: 1.8em;\n          }\n\n      .topic-title {\n            font-size: 1.2em;\n          }\n        .content{\n            font-size: 0.95em;\n          }\n  }\n</style>\n\n    <div class=\"chapter-container\">\n        <h2 class=\"chapter-title\">Chapter 1: Introduction to Python</h2>\n        <div class=\"content\">\n            <p><strong>Chapter Summary:</strong> This chapter introduces the fundamentals of Python, including what it is, why it's popular, setting up the environment, and writing your first simple program.</p>\n        </div>\n\n        <h3 class=\"topic-title\">What is Python?</h3>\n        <div class=\"content\">\n          <p>Python is a high-level, interpreted, general-purpose programming language. It's known for its readability and use of significant indentation. Key aspects include:</p>\n          <ul>\n            <li><strong>High-Level:</strong> Closer to human language, making it easier to understand and write.</li>\n            <li><strong>Interpreted:</strong> Code is executed line by line, which makes debugging easier.</li>\n            <li><strong>General-Purpose:</strong> Can be used for a variety of tasks like web development, data science, and automation.</li>\n            <li><strong>Dynamic Typing:</strong> Variable types are checked during runtime, not during compilation.</li>\n          </ul>\n        </div>\n\n        <h3 class=\"topic-title\">Why use Python?</h3>\n        <div class=\"content\">\n             <p>Python has become a popular choice for many reasons:</p>\n          <ul>\n            <li><strong>Readability:</strong> Clean and easy-to-understand syntax, resembling English.</li>\n            <li><strong>Versatility:</strong> Suitable for a wide range of applications from web development to scientific computing.</li>\n             <li><strong>Large Community and Ecosystem:</strong> Vast collection of libraries and frameworks that accelerate development.</li>\n            <li><strong>Beginner Friendly:</strong> Easy to learn and get started with, making it a great choice for newcomers to programming.</li>\n              <li><strong>Cross-Platform Compatibility:</strong> Runs on various operating systems like Windows, macOS, and Linux.</li>\n          </ul>\n        </div>\n\n        <h3 class=\"topic-title\">Setting up Python (Installation & Environment)</h3>\n        <div class=\"content\">\n            <p>To start with Python, you need to install it on your computer. Here's a general outline:</p>\n          <ul>\n            <li><strong>Download:</strong> Get the latest Python version from the official website (<a href=\"https://www.python.org\" target=\"_blank\">python.org</a>).</li>\n            <li><strong>Installation:</strong> Run the installer and follow the instructions. Ensure you check the 'Add Python to PATH' option.</li>\n            <li><strong>Environment Check:</strong> Open a terminal or command prompt and type <code>python --version</code> to confirm the installation.</li>\n              <li><strong>Virtual Environments:</strong> Consider using tools like <code>venv</code> or <code>conda</code> to manage project environments, which helps avoid conflicts between package versions.</li>\n          </ul>\n        </div>\n\n        <h3 class=\"topic-title\">Running your first Python program ('Hello, World!')</h3>\n         <div class=\"content\">\n              <p>Creating a simple \"Hello, World!\" program:</p>\n             <ol>\n                 <li>Open a text editor (like VSCode, Notepad++, or Sublime Text).</li>\n                 <li>Type:\n                      <div class=\"code-block\">\n                          <pre><code>print(\"Hello, World!\")</code></pre>\n                      </div>\n                 </li>\n                  <li>Save the file with a <code>.py</code> extension (e.g., <code>hello.py</code>).</li>\n                  <li>Open a terminal or command prompt, navigate to the directory where you saved the file, and run <code>python hello.py</code>. You should see <code>Hello, World!</code> printed to the console.</li>\n             </ol>\n        </div>\n         <h3 class=\"topic-title\">Basic Syntax rules</h3>\n        <div class=\"content\">\n            <p>Python syntax is clean and straightforward:</p>\n           <ul>\n               <li><strong>Indentation:</strong> Python uses indentation (spaces or tabs) to define code blocks (like loops and functions).</li>\n                <li><strong>Case Sensitivity:</strong> Python is case-sensitive; <code>myVar</code> is different from <code>myvar</code>.</li>\n                <li><strong>Statements:</strong> Typically one statement per line.</li>\n                 <li><strong>Variables:</strong> Variables are created when they are first assigned a value. No type declaration needed.</li>\n           </ul>\n        </div>\n        <h3 class=\"topic-title\">Comments in Python</h3>\n        <div class=\"content\">\n            <p>Comments are essential for explaining code. Python supports:</p>\n            <ul>\n              <li><strong>Single-line comments:</strong> Use the <code>#</code> symbol.</li>\n                <li><strong>Multi-line comments (docstrings):</strong> Use triple quotes (<code>'''</code> or <code>\"\"\"</code>).</li>\n                <div class=\"code-block\">\n                    <pre><code># This is a single line comment\n'''\nThis is a multi-line\ncomment or docstring\n'''\ndef my_function():\n  \"\"\"This is a function's docstring\"\"\"\n  pass</code></pre>\n                </div>\n              </ul>\n            <p class=\"exam-note\"><strong>Note:</strong> Comments and docstrings are critical for code readability and will help you explain your code in tests and real-world projects.</p>\n        </div>\n\n\n    </div>\n```\n"},
      ],
    },
  ],
});

export const generateFlashcard = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: "with the help of these course title: Data Structures in Python for Coding Prep, coursesummary: This course covers fundamental data structures and their implementations in Python, focusing on their use in coding challenges. The difficulty can be customized and the course aims to prepare students for coding interviews and competitive programming. Generate the flashcard on topic: Arrays and Lists\nThis chapter covers fundamental concepts of arrays and dynamic lists, their operations, and common use cases.\n\n🔗\nLinked Lists\nThis chapter introduces linked lists, including singly, doubly, and circular linked lists. You will learn to implement and use these structures efficiently.\n\n🗄️\nStacks and Queues\nThis chapter explains stacks and queues, their implementation using lists or linked lists, and practical applications such as parenthesis balancing and queue simulation.\n\n🧮\nHash Tables\nThis chapter covers hash tables or hash maps, including hashing functions, collision resolution, and implementation in Python using dictionaries.\n\n🌳\nTrees\nThis chapter introduces tree data structures, with a focus on binary trees, binary search trees (BSTs) and tree traversal algorithms.\n\n🌐\nGraphs\nThis chapter covers the basic concepts of graphs, representation, and fundamental graph traversal algorithms, along with some common problems on graphs.. with the difficulty level  moderate in JSON format with front back content, Maximum 15",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n[\n    {\n        "front": "What is the main difference between an array and a dynamic list (like Python\'s list)?",\n        "back": "Arrays typically have a fixed size once declared, while dynamic lists can grow or shrink as needed. In Python, \'list\' is a dynamic list.",\n        "difficulty": "moderate"\n    },\n    {\n       "front": "Name three common operations that can be performed on an array or list.",\n        "back": "Insertion, deletion, accessing elements by index are common array/list operations.",\n        "difficulty": "moderate"\n    },\n    {\n        "front":"What is the time complexity of accessing an element by index in an array or list?",\n         "back": "Accessing an element by index in an array or list is typically an O(1) operation, meaning it takes constant time.",\n        "difficulty":"moderate"\n    },\n   {\n        "front": "What is the time complexity of inserting an element at the beginning of an array/list? ",\n        "back": "Inserting at the beginning of a typical array or list (like python list) requires shifting the other elements, resulting in O(n) time complexity where n is the number of elements.",\n        "difficulty": "moderate"\n    },\n   {\n        "front": "How do you append an element at the end of a list in Python?",\n        "back": "You can append an element to the end of a list using the `append()` method, like `my_list.append(element)`",\n        "difficulty": "moderate"\n    },\n   {\n       "front": "How do you insert an element at a specific position in a list in Python?",\n        "back": "You can use the `insert()` method, e.g., `my_list.insert(index, element)` to insert an element at a specific index.",\n        "difficulty": "moderate"\n    },\n    {\n        "front": "How do you remove a specific element from a list by value in Python?",\n        "back": "You can remove a specific element by value using the `remove()` method, like `my_list.remove(element)`.",\n         "difficulty": "moderate"\n     },\n    {\n        "front": "How would you remove an element by its index from a list in Python?",\n       "back":"You can remove an element by index using `del my_list[index]` or by the `pop()` method, like `my_list.pop(index)`",\n       "difficulty": "moderate"\n    },\n     {\n      "front": "Describe a common use case for using lists in a coding challenge?",\n       "back": "Lists are often used for tasks such as storing input data, representing a sequence of values, or simulating a dynamic collection for processing.",\n        "difficulty":"moderate"\n    },\n    {\n        "front": "What is the result of slicing a list, such as `my_list[2:5]`?",\n        "back": "It returns a new list containing elements from index 2 (inclusive) up to index 5 (exclusive).",\n        "difficulty": "moderate"\n    },\n    {\n        "front": "How would you find the length (number of elements) of a list in Python?",\n        "back": "You can find the length of a list using the built-in `len()` function like `len(my_list)`.",\n        "difficulty": "moderate"\n    },\n    {\n        "front": "What is meant by \'in-place\' modification when it comes to array or list operations?",\n        "back": "\'In-place\' means that the original array or list is directly modified, without creating a new one, like append and remove methods.",\n        "difficulty": "moderate"\n    },\n      {\n        "front":"What can be the consequence of accessing an index which is out of range of a list/array?",\n        "back":"Accessing out of range index will result in an `IndexError` in python. It\'s important to validate index before accessing an array or list in order to avoid this error.",\n        "difficulty":"moderate"\n    },\n    {\n        "front":"What are some methods in Python that can be used for sorting lists?",\n         "back":"Lists can be sorted in Python using the `sort()` method (in-place) or using the `sorted()` function which returns a new sorted list.",\n        "difficulty":"moderate"\n    },\n    {\n      "front": "What is the purpose of list comprehension in Python? Give an example",\n        "back": "List comprehensions provide a concise way to create lists in Python. For example `squares = [x**2 for x in range(5)]` creates a list with squares of numbers from 0 to 4.",\n      "difficulty": "moderate"\n    }\n]\n```',
        },
      ],
    },
  ],
});

// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());
